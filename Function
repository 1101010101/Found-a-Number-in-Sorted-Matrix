//在行列都排好序的矩阵中找数 
//【题目】 给定一个有N*M的整型矩阵matrix和一个整数K， matrix的每一行和每一 列都是排好序的。实现一个函数，判断K 是否在matrix中。 
//例如： 
//0   1   2   5 
//2   3   4   7 
//4   4   4   8 
//5   7   7   9 
//如果K为7，返回true；如果K为6，返 回false。 
//【要求】 时间复杂度为O(N + M)，额外空间复杂度为O(1)。
#include<iostream>
#include<stdlib.h>
#include<vector>
using namespace std;

bool isContains(vector<vector<int>>& m,int k);

int main()
{
	int a[] = { 0,1,2,5 };
	vector<int> ievc(a, a + 4);
	vector<vector<int>> m;
	m.push_back(ievc);
	ievc[0] = 2;
	ievc[1] = 3;
	ievc[2] = 4;
	ievc[3] = 7;
	m.push_back(ievc);
	ievc[0] = 4;
	ievc[1] = 4;
	ievc[2] = 4;
	ievc[3] = 8;
	m.push_back(ievc);
	ievc[0] = 5;
	ievc[1] = 7;
	ievc[2] = 7;
	ievc[3] = 9;
	m.push_back(ievc);
	if (isContains(m, 12))
		cout << "yes" << endl;
	else
		cout << "no" << endl;
	system("pause");
	return 0;
}

bool isContains(vector<vector<int>>& m,int k)
{
	int row = 0;
	int col = m[0].size() - 1;
	while (row < col && col > -1)
	{
		if (m[row][col] == k)
			return true;
		else if (m[row][col] > k)
			col--;
		else
			row++;
	}
	return false;
}
